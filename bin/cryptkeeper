#!/usr/bin/env python

"""

@authors: Jeffrey Barrick

Predict cryptic bacterial gene expression signals in an input sequence.

"""

import argparse
import Bio
from Bio.SeqIO import FastaIO
from Bio.Seq import Seq
from Bio.Alphabet import generic_dna
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
import subprocess
import csv
from operator import itemgetter


#------------------------------------------------------------------------------
parser = argparse.ArgumentParser(description='input fasta')
parser.add_argument(
    '-i',  
    action='store', 
    dest='i',
    required=True,
    type=str,
    help="input fasta file",
    )

parser.add_argument(
    '-o',  
    action='store', 
    dest='o',
    required=True,
    type=str,
    help="output file prefix",
    )
    

#------------------------------------------------------------------------------

options = parser.parse_args()

# Predict promoters
tss_command = 'TSS_predict_BPROM.py -i ' + options.i + ' -o ' + options.o + '.TSS'
print(tss_command)
try:
  subprocess.check_call([tss_command], shell=True)
except subprocess.CalledProcessError as e:
  print(e)
  pass
except OSError as e:
  print(e)
  pass

# Predict terminators
rit_command = 'RIT_predict_TransTerm.py -i ' + options.i + ' -o ' + options.o + '.RIT'
print(rit_command)
try:
  subprocess.check_call([rit_command], shell=True)
except subprocess.CalledProcessError as e:
  print(e)

# Predict RBS
rbs_command = 'RBS_Predict_RBS_Calculator.py -i ' + options.i + ' -o ' + options.o + '.RBS'
print(rbs_command)
subprocess.call(rbs_command, shell=True)

# Predict ORFs

# Filter predictions

# Display predictions

