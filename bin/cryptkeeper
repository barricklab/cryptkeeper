#!/usr/bin/env python

"""

@authors: Jeffrey Barrick

Predict cryptic bacterial gene expression signals in an input sequence.

"""

import argparse
import Bio
from Bio.SeqIO import FastaIO
from Bio.Seq import Seq
from Bio.Alphabet import generic_dna
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
import subprocess
import csv
from operator import itemgetter

import plotly
import plotly.graph_objs as go
import numpy


#------------------------------------------------------------------------------
parser = argparse.ArgumentParser(description='input fasta')
parser.add_argument(
    '-i',  
    action='store', 
    dest='i',
    required=True,
    type=str,
    help="input fasta file",
    )

parser.add_argument(
    '-o',  
    action='store', 
    dest='o',
    required=True,
    type=str,
    help="output file prefix",
    )
    
parser.add_argument(
    '-p',
    action='store_true',
    dest='plot_only',
    help="plot mode, assumes output files all exist",
    )

#------------------------------------------------------------------------------

options = parser.parse_args()

input_fasta_file_name = options.i

# Predict promoters
tss_prediction_file_name = options.o + '.TSS.csv'

if not options.plot_only:
  tss_command = 'TSS_predict_BPROM.py -i ' + input_fasta_file_name + ' -o ' + tss_prediction_file_name
  print(tss_command)
  try:
    subprocess.check_call([tss_command], shell=True)
  except subprocess.CalledProcessError as e:
    print(e)
  except OSError as e:
    print(e)

# Predict terminators
rit_prediction_file_name = options.o + '.RIT.csv'

if not options.plot_only:
  rit_command = 'RIT_predict_TransTerm.py -i ' + input_fasta_file_name + ' -o ' + rit_prediction_file_name
  print(rit_command)
  try:
    subprocess.check_call([rit_command], shell=True)
  except subprocess.CalledProcessError as e:
    print(e)

# Predict ORFs

orf_prediction_file_name = options.o + '.ORF.csv'

if not options.plot_only:
  orf_command = 'ORF_predict.py -i ' + input_fasta_file_name + ' -o ' + orf_prediction_file_name
  print(orf_command)
  try:
    subprocess.check_call(orf_command, shell=True)
  except subprocess.CalledProcessError as e:
    print(e)
  except OSError as e:
    print(e)

# Predict RBS
rbs_prediction_file_name = options.o + '.RBS.csv'

if not options.plot_only:
  rbs_command = 'RBS_predict_RBS_Calculator.py -i ' + input_fasta_file_name + ' -o ' + rbs_prediction_file_name + ' -s ' + orf_prediction_file_name
  print(rbs_command)
  try:
    subprocess.check_call(rbs_command, shell=True)
  except subprocess.CalledProcessError as e:
    print(e)
  except OSError as e:
    print(e)


# Load sequence
i=0
for this_seq in SeqIO.parse(options.i, "fasta"):
  i += 1
  if (i>1):
    exit()
  main_seq = this_seq.upper()

# Load predictions

tss_predictions = []
tss_reader = csv.DictReader(open(tss_prediction_file_name))
for row in tss_reader:
  tss_predictions.append(row)
  
rit_predictions = []
rit_reader = csv.DictReader(open(rit_prediction_file_name))
for row in rit_reader:
  rit_predictions.append(row)

orf_predictions = []
orf_reader = csv.DictReader(open(orf_prediction_file_name))
for row in orf_reader:
  row['start_codon_position'] = int(row['start'] if row['strand'] == '+' else row['end'])
  if row['strand'] == '+':
    row['array_minus'] = 0
    row['array'] = int(row['end']) - int(row['start']) + 1
  else:
    row['array_minus'] = int(row['end']) - int(row['start']) + 1  
    row['array'] = 0
  orf_predictions.append(row)

#Re-sort by the start codon position so we are in the same order as RBS
orf_predictions = sorted(orf_predictions, key=itemgetter('start_codon_position')) 

#Combine ORF and RBS predictions
rbs_predictions = []
rbs_reader = csv.DictReader(open(rbs_prediction_file_name))
for row in rbs_reader:
  row["score"] = numpy.log10(float(row["score"]))
  rbs_predictions.append(row)

#transfer information from orfs before we filter
for i in range(len(rbs_predictions)):
  rbs_predictions[i]['array'] = orf_predictions[i]['array']
  rbs_predictions[i]['array_minus'] = orf_predictions[i]['array_minus']


# Filter predictions
rbs_predictions = filter(lambda x:float(x["score"]) > 1, rbs_predictions)



# Display predictions

#settings
TSS_color = '#2ab717'
RIT_color = '#ff0000'
RBS_color = '#0d30e0'
marker_size = 20
tss_score_max = 10

nucleotide_sequence  = go.Scatter(
  x=range(1,len(main_seq)+1),
  y=[tss_score_max]*len(main_seq),
  mode='text',
  name = 'Sequence',
  text=list(main_seq.seq)
)

tss_series = go.Scatter(
  x = [d['TSSpos'] for d in tss_predictions],
  y = [d['score'] for d in tss_predictions],
  mode = 'markers',
  name = 'TSS',

  
  marker = dict(
    symbol=[ ('triangle-right'  if d['strand'] == '+' else 'triangle-left')  for d in tss_predictions],
    size=marker_size,
    color=TSS_color,
  ),
  
  error_y=dict(
            type='data',
            array=[0],
            arrayminus=[d['score'] for d in tss_predictions],
            width=0,
            color=TSS_color,
        )
)

rit_series = go.Scatter(
  x = [e['start'] for e in rit_predictions],
  y = [e['conf'] for e in rit_predictions],
  mode = 'markers',
  name = 'RIT',
  yaxis='y2',
  marker = dict(
    symbol=[ ('triangle-right'  if d['strand'] == '+' else 'triangle-left')  for d in rit_predictions],
    size=marker_size,
    color=RIT_color,
  ),
  error_y=dict(
          type='data',
          array=[0],
          arrayminus=[e['conf'] for e in rit_predictions],
          width=0,
          color=RIT_color,
      )
)

rbs_series = go.Scatter(
  x = [f['position'] for f in rbs_predictions],
  y = [f['score'] for f in rbs_predictions],
  mode = 'markers',
  name = 'RBS',
  yaxis='y3',
  marker = dict(
    symbol=[ ('triangle-right'  if d['strand'] == '+' else 'triangle-left')  for d in rbs_predictions],
    size=marker_size,
    color=RBS_color,
  ),
  error_y=dict(
          type='data',
          array=[0],
          arrayminus=[f['score'] for f in rbs_predictions],
          width=0,
          color=RBS_color,
  ),
  error_x=dict(
          type='data',
          array=[f['array'] for f in rbs_predictions],
          arrayminus=[f['array_minus'] for f in rbs_predictions],
          width=3,
          color=RBS_color,
  ),
)

layout = go.Layout(
  title='cryptkeeper results: ' + input_fasta_file_name,
  
  xaxis=dict(
        domain=[0.18, 1.0]
  ),
  yaxis=dict(
    title='TSS score',
    range = [0, tss_score_max+0.2],
    titlefont=dict(
        color=TSS_color
    ),
    tickfont=dict(
        color=TSS_color
    )
  ),
  yaxis2=dict(
      title='RIT score',
      range = [0, 110],
      titlefont=dict(
          color=RIT_color
      ),
      tickfont=dict(
          color=RIT_color
      ),
      anchor='free',
      overlaying='y',
      side='left',
      position=0.06,
  ),
  yaxis3=dict(
      title='log10 RBS score',
      range = [2, 5],
      titlefont=dict(
          color=RBS_color
      ),
      tickfont=dict(
          color=RBS_color
      ),
      anchor='free',
      overlaying='y',
      side='left',
      position=0.12,
  ),
)

data = [nucleotide_sequence, tss_series, rit_series, rbs_series]

fig = dict( data=data, layout=layout )

plotly.offline.plot(fig, filename= options.o + '.plot.html')
