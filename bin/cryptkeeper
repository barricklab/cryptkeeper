#!/usr/bin/env python

"""

@authors: Jeffrey Barrick

Predict cryptic bacterial gene expression signals in an input sequence.

"""

import argparse
import Bio
from Bio.SeqIO import FastaIO
from Bio.Seq import Seq
from Bio.Alphabet import generic_dna
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
import subprocess
import csv
from operator import itemgetter

import plotly
import plotly.graph_objs as go



#------------------------------------------------------------------------------
parser = argparse.ArgumentParser(description='input fasta')
parser.add_argument(
    '-i',  
    action='store', 
    dest='i',
    required=True,
    type=str,
    help="input fasta file",
    )

parser.add_argument(
    '-o',  
    action='store', 
    dest='o',
    required=True,
    type=str,
    help="output file prefix",
    )
    
parser.add_argument(
    '-p',
    action='store_true',
    dest='plot_only',
    help="plot mode, assumes output files all exist",
    )

#------------------------------------------------------------------------------

options = parser.parse_args()

input_fasta_file = options.i

# Predict promoters
tss_prediction_file_name = options.o + '.TSS.tsv'

if not options.plot_only:
  tss_command = 'TSS_predict_BPROM.py -i ' + input_fasta_file + ' -o ' + tss_prediction_file_name
  print(tss_command)
  try:
    subprocess.check_call([tss_command], shell=True)
  except subprocess.CalledProcessError as e:
    print(e)
  except OSError as e:
    print(e)

# Predict terminators
rit_prediction_file_name = options.o + '.RIT.tsv'

if not options.plot_only:
  rit_command = 'RIT_predict_TransTerm.py -i ' + input_fasta_file + ' -o ' + rit_prediction_file_name
  print(rit_command)
  try:
    subprocess.check_call([rit_command], shell=True)
  except subprocess.CalledProcessError as e:
    print(e)

# Predict RBS
rbs_prediction_file_name = options.o + '.RBS.tsv'

if not options.plot_only:
  rbs_command = 'RBS_Predict_RBS_Calculator.py -i ' + input_fasta_file + ' -o ' + rbs_prediction_file_name
  print(rbs_command)
  try:
    subprocess.check_call(rbs_command, shell=True)
  except subprocess.CalledProcessError as e:
    print(e)
  except OSError as e:
    print(e)

# Predict ORFs

# Load predictions

tss_predictions = []
tss_reader = csv.DictReader(open(tss_prediction_file_name))
for row in tss_reader:
  tss_predictions.append(row)
  
rit_predictions = []
rit_reader = csv.DictReader(open(rit_prediction_file_name))
for row in rit_reader:
  rit_predictions.append(row)
  
rbs_predictions = []
rbs_reader = csv.DictReader(open(rbs_prediction_file_name))
for row in rbs_reader:
  rbs_predictions.append(row)
  
# Filter predictions

# Display predictions
print(tss_predictions)
tss_series = go.Scatter(
  x = [d['TSSpos'] for d in tss_predictions],
  y = [d['score'] for d in tss_predictions],
  mode = 'markers',
  name = 'TSS',
  yaxis='y1',
  transforms = [dict(
    type = 'groupby',
    groups = [d['strand'] for d in tss_predictions],
    styles = [
      dict(target = '+', value = dict(marker = dict(color = 'black'))),
      dict(target = '-', value = dict(marker = dict(color = 'red'))),
    ]
  )],
  symbol='square'
)

rit_series = go.Scatter(
  x = [d['start'] for d in rit_predictions],
  y = [d['conf'] for d in rit_predictions],
  mode = 'markers',
  name = 'RIT',
  yaxis='y2',
  symbol='diamond'
)

rbs_series = go.Scatter(
  x = [d['position'] for d in rbs_predictions],
  y = [d['score'] for d in rbs_predictions],
  mode = 'markers',
  name = 'RBS',
  yaxis='y3',
  symbol='circle'
)

data = [tss_series, rit_series, rbs_series]
plotly.offline.plot(data, filename= options.o + '.plot.html')
